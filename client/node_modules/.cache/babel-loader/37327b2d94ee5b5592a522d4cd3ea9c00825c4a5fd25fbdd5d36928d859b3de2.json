{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from '@wry/equality';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n  var stateRef = useRef();\n  if (!stateRef.current || client !== stateRef.current.client || query !== stateRef.current.query) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  var state = stateRef.current;\n  var _a = useState(0),\n    _tick = _a[0],\n    setTick = _a[1];\n  state.forceUpdate = function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  };\n  return state;\n}\nvar InternalState = function () {\n  function InternalState(client, query, previous) {\n    this.client = client;\n    this.query = query;\n    this.ssrDisabledResult = maybeDeepFreeze({\n      loading: true,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.loading\n    });\n    this.skipStandbyResult = maybeDeepFreeze({\n      loading: false,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.ready\n    });\n    this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n    verifyDocumentType(query, DocumentType.Query);\n    var previousResult = previous && previous.result;\n    var previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n  InternalState.prototype.forceUpdate = function () {\n    __DEV__ && invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  };\n  InternalState.prototype.executeQuery = function (options) {\n    var _this = this;\n    var _a;\n    if (options.query) {\n      Object.assign(this, {\n        query: options.query\n      });\n    }\n    this.watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n    var concast = this.observable.reobserveAsConcast(this.getObsQueryOptions());\n    this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n    this.result = void 0;\n    this.forceUpdate();\n    return new Promise(function (resolve) {\n      var result;\n      concast.subscribe({\n        next: function (value) {\n          result = value;\n        },\n        error: function () {\n          resolve(_this.toQueryResult(_this.observable.getCurrentResult()));\n        },\n        complete: function () {\n          resolve(_this.toQueryResult(result));\n        }\n      });\n    });\n  };\n  InternalState.prototype.useQuery = function (options) {\n    var _this = this;\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n    this.useOptions(options);\n    var obsQuery = this.useObservableQuery();\n    var result = useSyncExternalStore(useCallback(function () {\n      if (_this.renderPromises) {\n        return function () {};\n      }\n      var onNext = function () {\n        var previousResult = _this.result;\n        var result = obsQuery.getCurrentResult();\n        if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && equal(previousResult.data, result.data)) {\n          return;\n        }\n        _this.setResult(result);\n      };\n      var onError = function (error) {\n        var last = obsQuery[\"last\"];\n        subscription.unsubscribe();\n        try {\n          obsQuery.resetLastResults();\n          subscription = obsQuery.subscribe(onNext, onError);\n        } finally {\n          obsQuery[\"last\"] = last;\n        }\n        if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n          throw error;\n        }\n        var previousResult = _this.result;\n        if (!previousResult || previousResult && previousResult.loading || !equal(error, previousResult.error)) {\n          _this.setResult({\n            data: previousResult && previousResult.data,\n            error: error,\n            loading: false,\n            networkStatus: NetworkStatus.error\n          });\n        }\n      };\n      var subscription = obsQuery.subscribe(onNext, onError);\n      return function () {\n        return setTimeout(function () {\n          return subscription.unsubscribe();\n        });\n      };\n    }, [obsQuery, this.renderPromises, this.client.disableNetworkFetches]), function () {\n      return _this.getCurrentResult();\n    }, function () {\n      return _this.getCurrentResult();\n    });\n    this.unsafeHandlePartialRefetch(result);\n    return this.toQueryResult(result);\n  };\n  InternalState.prototype.useOptions = function (options) {\n    var _a;\n    var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n    var currentWatchQueryOptions = this.watchQueryOptions;\n    if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n      if (currentWatchQueryOptions && this.observable) {\n        this.observable.reobserve(this.getObsQueryOptions());\n        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n        this.result = void 0;\n      }\n    }\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n    if ((this.renderPromises || this.client.disableNetworkFetches) && this.queryHookOptions.ssr === false && !this.queryHookOptions.skip) {\n      this.result = this.ssrDisabledResult;\n    } else if (this.queryHookOptions.skip || this.watchQueryOptions.fetchPolicy === 'standby') {\n      this.result = this.skipStandbyResult;\n    } else if (this.result === this.ssrDisabledResult || this.result === this.skipStandbyResult) {\n      this.result = void 0;\n    }\n  };\n  InternalState.prototype.getObsQueryOptions = function () {\n    var toMerge = [];\n    var globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n    toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));\n    return toMerge.reduce(mergeOptions);\n  };\n  InternalState.prototype.createWatchQueryOptions = function (_a) {\n    var _b;\n    if (_a === void 0) {\n      _a = {};\n    }\n    var skip = _a.skip,\n      ssr = _a.ssr,\n      onCompleted = _a.onCompleted,\n      onError = _a.onError,\n      defaultOptions = _a.defaultOptions,\n      otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n    var watchQueryOptions = Object.assign(otherOptions, {\n      query: this.query\n    });\n    if (this.renderPromises && (watchQueryOptions.fetchPolicy === 'network-only' || watchQueryOptions.fetchPolicy === 'cache-and-network')) {\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {};\n    }\n    if (skip) {\n      var _c = watchQueryOptions.fetchPolicy,\n        fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c,\n        _d = watchQueryOptions.initialFetchPolicy,\n        initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy: initialFetchPolicy,\n        fetchPolicy: 'standby'\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy = ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) || this.getDefaultFetchPolicy();\n    }\n    return watchQueryOptions;\n  };\n  InternalState.prototype.getDefaultFetchPolicy = function () {\n    var _a, _b;\n    return ((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"cache-first\";\n  };\n  InternalState.prototype.onCompleted = function (data) {};\n  InternalState.prototype.onError = function (error) {};\n  InternalState.prototype.useObservableQuery = function () {\n    var obsQuery = this.observable = this.renderPromises && this.renderPromises.getSSRObservable(this.watchQueryOptions) || this.observable || this.client.watchQuery(this.getObsQueryOptions());\n    this.obsQueryFields = useMemo(function () {\n      return {\n        refetch: obsQuery.refetch.bind(obsQuery),\n        reobserve: obsQuery.reobserve.bind(obsQuery),\n        fetchMore: obsQuery.fetchMore.bind(obsQuery),\n        updateQuery: obsQuery.updateQuery.bind(obsQuery),\n        startPolling: obsQuery.startPolling.bind(obsQuery),\n        stopPolling: obsQuery.stopPolling.bind(obsQuery),\n        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery)\n      };\n    }, [obsQuery]);\n    var ssrAllowed = !(this.queryHookOptions.ssr === false || this.queryHookOptions.skip);\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n      if (obsQuery.getCurrentResult().loading) {\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n    return obsQuery;\n  };\n  InternalState.prototype.setResult = function (nextResult) {\n    var previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  };\n  InternalState.prototype.handleErrorOrCompleted = function (result) {\n    var _this = this;\n    if (!result.loading) {\n      var error_1 = this.toApolloError(result);\n      Promise.resolve().then(function () {\n        if (error_1) {\n          _this.onError(error_1);\n        } else if (result.data) {\n          _this.onCompleted(result.data);\n        }\n      }).catch(function (error) {\n        __DEV__ && invariant.warn(error);\n      });\n    }\n  };\n  InternalState.prototype.toApolloError = function (result) {\n    return isNonEmptyArray(result.errors) ? new ApolloError({\n      graphQLErrors: result.errors\n    }) : result.error;\n  };\n  InternalState.prototype.getCurrentResult = function () {\n    if (!this.result) {\n      this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n    }\n    return this.result;\n  };\n  InternalState.prototype.toQueryResult = function (result) {\n    var queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n    var data = result.data,\n      partial = result.partial,\n      resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n    this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({\n      data: data\n    }, resultWithoutPartial), this.obsQueryFields), {\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData\n    }));\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      queryResult.error = new ApolloError({\n        graphQLErrors: result.errors\n      });\n    }\n    return queryResult;\n  };\n  InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n    if (result.partial && this.queryHookOptions.partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && this.observable.options.fetchPolicy !== 'cache-only') {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch\n      });\n      this.observable.refetch();\n    }\n  };\n  return InternalState;\n}();","map":{"version":3,"mappings":"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","names":["invariant","useCallback","useContext","useMemo","useRef","useState","useSyncExternalStore","equal","mergeOptions","getApolloContext","ApolloError","NetworkStatus","DocumentType","verifyDocumentType","useApolloClient","canUseWeakMap","compact","isNonEmptyArray","maybeDeepFreeze","Object","useQuery","query","options","create","useInternalState","client","stateRef","current","InternalState","state","_tick","setTick","forceUpdate","previous","loading","data","error","networkStatus","ready","WeakMap","Map","Query","previousResult","result","previousData","__DEV__","assign","watchQueryOptions","createWatchQueryOptions","queryHookOptions","concast","observable","reobserveAsConcast","getObsQueryOptions","Promise","resolve","subscribe","next","value","_this","toQueryResult","getCurrentResult","complete","renderPromises","useOptions","obsQuery","useObservableQuery","onNext","setResult","onError","last","subscription","unsubscribe","resetLastResults","hasOwnProperty","call","disableNetworkFetches","unsafeHandlePartialRefetch","currentWatchQueryOptions","reobserve","onCompleted","prototype","ssr","skip","ssrDisabledResult","fetchPolicy","skipStandbyResult","toMerge","globalDefaults","defaultOptions","watchQuery","push","reduce","_a","otherOptions","variables","getDefaultFetchPolicy","_d","initialFetchPolicy","getSSRObservable","obsQueryFields","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","error_1","toApolloError","then","catch","warn","errors","graphQLErrors","queryResult","toQueryResultCache","get","partial","resultWithoutPartial","set","called","partialRefetch","keys","length"],"sources":["C:\\Users\\Fistycuffs\\mana-forge\\client\\node_modules\\@apollo\\src\\react\\hooks\\useQuery.ts"],"sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables, WatchQueryFetchPolicy } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, compact, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables extends OperationVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables extends OperationVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  }\n\n  executeQuery(options: QueryHookOptions<TData, TVariables>) {\n    if (options.query) {\n      Object.assign(this, { query: options.query })\n    }\n\n    this.watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    const concast = this.observable.reobserveAsConcast(\n      this.getObsQueryOptions()\n    );\n\n    // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n    // but save the current data as this.previousData, just like setResult\n    // usually does.\n    this.previousData = this.result?.data || this.previousData;\n    this.result = void 0;\n    this.forceUpdate();\n\n    return new Promise<QueryResult<TData, TVariables>>((resolve) => {\n      let result: ApolloQueryResult<TData>;\n\n      // Subscribe to the concast independently of the ObservableQuery in case \n      // the component gets unmounted before the promise resolves. This prevents\n      // the concast from terminating early and resolving with `undefined` when\n      // there are no more subscribers for the concast.\n      concast.subscribe({\n        next: (value) => {\n          result = value;\n        },\n        error: () => {\n          resolve(this.toQueryResult(this.observable.getCurrentResult()));\n        },\n        complete: () => {\n          resolve(this.toQueryResult(result));\n        }\n      });\n    });\n  }\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        // Do the \"unsubscribe\" with a short delay.\n        // This way, an existing subscription can be reused without an additional\n        // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery \n        // happen in very fast succession.\n        return () => setTimeout(() => subscription.unsubscribe());\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    return this.toQueryResult(result);\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<\n      Partial<WatchQueryOptions<TVariables, TData>>\n    > = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(\n      this.observable && this.observable.options,\n      this.watchQueryOptions,\n    ));\n\n    return toMerge.reduce(\n      mergeOptions\n    ) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery(this.getObsQueryOptions());\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false ||\n      this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      const error = this.toApolloError(result);\n\n      // wait a tick in case we are in the middle of rendering a component\n      Promise.resolve().then(() => {\n        if (error) {\n          this.onError(error);\n        } else if (result.data) {\n          this.onCompleted(result.data);\n        }\n      }).catch(error => {\n        invariant.warn(error);\n      });\n    }\n  }\n\n  private toApolloError(result: ApolloQueryResult<TData>): ApolloError | undefined {\n    return isNonEmptyArray(result.errors)\n      ? new ApolloError({ graphQLErrors: result.errors })\n      : result.error\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}